# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_swig_cellsimcpp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_swig_cellsimcpp')
    _swig_cellsimcpp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_swig_cellsimcpp', [dirname(__file__)])
        except ImportError:
            import _swig_cellsimcpp
            return _swig_cellsimcpp
        if fp is not None:
            try:
                _mod = imp.load_module('_swig_cellsimcpp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _swig_cellsimcpp = swig_import_helper()
    del swig_import_helper
else:
    import _swig_cellsimcpp
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Cell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cell, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _swig_cellsimcpp.new_Cell()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swig_cellsimcpp.delete_Cell
    __del__ = lambda self: None

    def Run(self):
        return _swig_cellsimcpp.Cell_Run(self)

    def GetPosX(self):
        return _swig_cellsimcpp.Cell_GetPosX(self)

    def GetPosY(self):
        return _swig_cellsimcpp.Cell_GetPosY(self)

    def SetPosX(self, nxt_x):
        return _swig_cellsimcpp.Cell_SetPosX(self, nxt_x)

    def SetPosY(self, nxt_y):
        return _swig_cellsimcpp.Cell_SetPosY(self, nxt_y)

    def SetColour(self, colour):
        return _swig_cellsimcpp.Cell_SetColour(self, colour)

    def GetColour(self):
        return _swig_cellsimcpp.Cell_GetColour(self)

    def GetNumFreeDNA(self):
        return _swig_cellsimcpp.Cell_GetNumFreeDNA(self)

    def PopDNA(self):
        return _swig_cellsimcpp.Cell_PopDNA(self)

    def GetNFlagella(self):
        return _swig_cellsimcpp.Cell_GetNFlagella(self)

    def AddRsrc(self):
        return _swig_cellsimcpp.Cell_AddRsrc(self)
Cell_swigregister = _swig_cellsimcpp.Cell_swigregister
Cell_swigregister(Cell)

class IntGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntGrid, name)
    __repr__ = _swig_repr

    def __init__(self, x, y):
        this = _swig_cellsimcpp.new_IntGrid(x, y)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ErasePoint(self, x, y):
        return _swig_cellsimcpp.IntGrid_ErasePoint(self, x, y)

    def GetPoint(self, *args):
        return _swig_cellsimcpp.IntGrid_GetPoint(self, *args)

    def __call__(self, x, y):
        return _swig_cellsimcpp.IntGrid___call__(self, x, y)

    def SetPoint(self, x, y, p):
        return _swig_cellsimcpp.IntGrid_SetPoint(self, x, y, p)

    def IsOccupied(self, x, y):
        return _swig_cellsimcpp.IntGrid_IsOccupied(self, x, y)

    def MapSize(self):
        return _swig_cellsimcpp.IntGrid_MapSize(self)
    __swig_destroy__ = _swig_cellsimcpp.delete_IntGrid
    __del__ = lambda self: None
IntGrid_swigregister = _swig_cellsimcpp.IntGrid_swigregister
IntGrid_swigregister(IntGrid)

class intp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _swig_cellsimcpp.new_intp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swig_cellsimcpp.delete_intp
    __del__ = lambda self: None

    def assign(self, value):
        return _swig_cellsimcpp.intp_assign(self, value)

    def value(self):
        return _swig_cellsimcpp.intp_value(self)

    def cast(self):
        return _swig_cellsimcpp.intp_cast(self)
    if _newclass:
        frompointer = staticmethod(_swig_cellsimcpp.intp_frompointer)
    else:
        frompointer = _swig_cellsimcpp.intp_frompointer
intp_swigregister = _swig_cellsimcpp.intp_swigregister
intp_swigregister(intp)

def intp_frompointer(t):
    return _swig_cellsimcpp.intp_frompointer(t)
intp_frompointer = _swig_cellsimcpp.intp_frompointer

class CellGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CellGrid, name)
    __repr__ = _swig_repr

    def __init__(self, x, y):
        this = _swig_cellsimcpp.new_CellGrid(x, y)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLinearIndex(self, x, y):
        return _swig_cellsimcpp.CellGrid_GetLinearIndex(self, x, y)

    def ErasePoint(self, x, y):
        return _swig_cellsimcpp.CellGrid_ErasePoint(self, x, y)

    def GetPoint(self, *args):
        return _swig_cellsimcpp.CellGrid_GetPoint(self, *args)

    def __call__(self, x, y):
        return _swig_cellsimcpp.CellGrid___call__(self, x, y)

    def SetPoint(self, x, y, p):
        return _swig_cellsimcpp.CellGrid_SetPoint(self, x, y, p)

    def IsOccupied(self, x, y):
        return _swig_cellsimcpp.CellGrid_IsOccupied(self, x, y)

    def MapSize(self):
        return _swig_cellsimcpp.CellGrid_MapSize(self)
    __swig_destroy__ = _swig_cellsimcpp.delete_CellGrid
    __del__ = lambda self: None
CellGrid_swigregister = _swig_cellsimcpp.CellGrid_swigregister
CellGrid_swigregister(CellGrid)

class Cellp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cellp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cellp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _swig_cellsimcpp.new_Cellp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swig_cellsimcpp.delete_Cellp
    __del__ = lambda self: None

    def assign(self, value):
        return _swig_cellsimcpp.Cellp_assign(self, value)

    def value(self):
        return _swig_cellsimcpp.Cellp_value(self)

    def cast(self):
        return _swig_cellsimcpp.Cellp_cast(self)
    if _newclass:
        frompointer = staticmethod(_swig_cellsimcpp.Cellp_frompointer)
    else:
        frompointer = _swig_cellsimcpp.Cellp_frompointer
Cellp_swigregister = _swig_cellsimcpp.Cellp_swigregister
Cellp_swigregister(Cellp)

def Cellp_frompointer(t):
    return _swig_cellsimcpp.Cellp_frompointer(t)
Cellp_frompointer = _swig_cellsimcpp.Cellp_frompointer

# This file is compatible with both classic and new-style classes.


